"use strict";(self.webpackChunkcodeframe_docs=self.webpackChunkcodeframe_docs||[]).push([[8968],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}},49246:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"api-reference/string","title":"string","description":"Purpose:","source":"@site/docs/api-reference/string.md","sourceDirName":"api-reference","slug":"/api-reference/string","permalink":"/docs/api-reference/string","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-reference/string.md","tags":[],"version":"current","frontMatter":{"title":"string"},"sidebar":"tutorialSidebar","previous":{"title":"graphics","permalink":"/docs/api-reference/graphics/"},"next":{"title":"theme","permalink":"/docs/api-reference/theme/"}}');var i=s(74848),t=s(28453);const c={title:"string"},l="string Module",d={},o=[{value:"<strong>Functions Overview</strong>",id:"functions-overview",level:2},{value:"<strong>Function Details</strong>",id:"function-details",level:2},{value:"<code>vector&lt;string&gt; splitString(const string&amp; input, char delimiter);</code>",id:"vectorstring-splitstringconst-string-input-char-delimiter",level:3},{value:"<code>void skipWhitespace(const string&amp; input, size_t&amp; pos);</code>",id:"void-skipwhitespaceconst-string-input-size_t-pos",level:3},{value:"<code>string trim(const string&amp; str);</code>",id:"string-trimconst-string-str",level:3},{value:"<code>string replaceAll(string&amp; str, const string&amp; from, const string&amp; to);</code>",id:"string-replaceallstring-str-const-string-from-const-string-to",level:3},{value:"<code>string replaceAllInMap(const string&amp; input, const StringReplaceMap&amp; replaceMap);</code>",id:"string-replaceallinmapconst-string-input-const-stringreplacemap-replacemap",level:3},{value:"<strong>Types</strong>",id:"types",level:3},{value:"<code>string joinStringsWithNewline(const vector&lt;string&gt;&amp; strings);</code>",id:"string-joinstringswithnewlineconst-vectorstring-strings",level:3},{value:"<code>string genString(const string&amp; character, int length);</code>",id:"string-genstringconst-string-character-int-length",level:3},{value:"<code>void removeIndexes(vector&lt;string&gt;&amp; vec, vector&lt;int&gt; indexes);</code>",id:"void-removeindexesvectorstring-vec-vectorint-indexes",level:3},{value:"<strong>Case Transformation Functions</strong>",id:"case-transformation-functions",level:2},{value:"<strong>Types</strong>",id:"types-1",level:2},{value:"<code>enum class StringCase</code>",id:"enum-class-stringcase",level:3},{value:"<strong>Functions Overview</strong>",id:"functions-overview-1",level:2},{value:"<code>StringCase detectCaseStyle(const string&amp; str);</code>",id:"stringcase-detectcasestyleconst-string-str",level:3},{value:"<code>string toLowerCase(const string&amp; str);</code>",id:"string-tolowercaseconst-string-str",level:3},{value:"<code>string toUpperCase(const string&amp; str);</code>",id:"string-touppercaseconst-string-str",level:3},{value:"<code>string toCamelCase(const string&amp; str);</code>",id:"string-tocamelcaseconst-string-str",level:3},{value:"<code>string toPascalCase(const string&amp; str);</code>",id:"string-topascalcaseconst-string-str",level:3},{value:"<code>string toSnakeCase(const string&amp; str);</code>",id:"string-tosnakecaseconst-string-str",level:3},{value:"<code>string toKebabCase(const string&amp; str);</code>",id:"string-tokebabcaseconst-string-str",level:3}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"string-module",children:[(0,i.jsx)(n.code,{children:"string"})," Module"]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"}),(0,i.jsx)(n.br,{}),"\n","Essential string and vector utilities for manipulating, formatting, and processing text."]}),"\n",(0,i.jsx)(n.h2,{id:"functions-overview",children:(0,i.jsx)(n.strong,{children:"Functions Overview"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Function"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"splitString"})}),(0,i.jsx)(n.td,{children:"Split a string by any delimiter."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"skipWhitespace"})}),(0,i.jsx)(n.td,{children:"Advance a position index past all whitespace chars in a string."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"trim"})}),(0,i.jsx)(n.td,{children:"Remove leading/trailing whitespace from a string."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"replaceAll"})}),(0,i.jsxs)(n.td,{children:["Replace ",(0,i.jsx)(n.strong,{children:"all"})," occurrences of a substring."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"replaceAllInMap"})}),(0,i.jsx)(n.td,{children:"Replace multiple placeholders using a map."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"joinStringsWithNewline"})}),(0,i.jsxs)(n.td,{children:["Join vector of strings with ",(0,i.jsx)(n.code,{children:"\\n"})," as the separator."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"genString"})}),(0,i.jsx)(n.td,{children:"Generate a string of a specific character and length."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"removeIndexes"})}),(0,i.jsx)(n.td,{children:"Remove vector elements at the given indexes."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"function-details",children:(0,i.jsx)(n.strong,{children:"Function Details"})}),"\n",(0,i.jsx)(n.h3,{id:"vectorstring-splitstringconst-string-input-char-delimiter",children:(0,i.jsx)(n.code,{children:"vector<string> splitString(const string& input, char delimiter);"})}),"\n",(0,i.jsxs)(n.p,{children:["Splits ",(0,i.jsx)(n.code,{children:"input"})," into substrings using ",(0,i.jsx)(n.code,{children:"delimiter"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"vector<string>"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'auto parts = splitString("a,b,c", \',\'); // ["a", "b", "c"]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"void-skipwhitespaceconst-string-input-size_t-pos",children:(0,i.jsx)(n.code,{children:"void skipWhitespace(const string& input, size_t& pos);"})}),"\n",(0,i.jsxs)(n.p,{children:["Moves ",(0,i.jsx)(n.code,{children:"pos"})," forward in ",(0,i.jsx)(n.code,{children:"input"})," until the next non-whitespace char or end."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Params:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"input"}),": string to scan"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pos"}),": (in/out) index to advance"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'size_t p = 0;\nskipWhitespace("   hello", p); // p now at index 3\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"string-trimconst-string-str",children:(0,i.jsx)(n.code,{children:"string trim(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Strips whitespace from both ends."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," trimmed string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'trim("  test "); // "test"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-replaceallstring-str-const-string-from-const-string-to",children:(0,i.jsx)(n.code,{children:"string replaceAll(string& str, const string& from, const string& to);"})}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.strong,{children:"every"})," ",(0,i.jsx)(n.code,{children:"from"})," in ",(0,i.jsx)(n.code,{children:"str"})," with ",(0,i.jsx)(n.code,{children:"to"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Modified string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'replaceAll("foo bar foo", "foo", "baz"); // "baz bar baz"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-replaceallinmapconst-string-input-const-stringreplacemap-replacemap",children:(0,i.jsx)(n.code,{children:"string replaceAllInMap(const string& input, const StringReplaceMap& replaceMap);"})}),"\n",(0,i.jsxs)(n.p,{children:["Replace all keys in ",(0,i.jsx)(n.code,{children:"replaceMap"})," with their values throughout ",(0,i.jsx)(n.code,{children:"input"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"types",children:(0,i.jsx)(n.strong,{children:"Types"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"StringReplaceMap"})}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"using StringReplaceMap = std::unordered_map<string, string>;"}),(0,i.jsx)(n.br,{}),"\n","Map of string \u2192 string, for bulk placeholder replacement."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Modified string"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'replaceAllInMap("Hi, {name}!", {{"{name}", "Sam"}}); // "Hi, Sam!"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-joinstringswithnewlineconst-vectorstring-strings",children:(0,i.jsx)(n.code,{children:"string joinStringsWithNewline(const vector<string>& strings);"})}),"\n",(0,i.jsxs)(n.p,{children:["Concatenate all strings, separated by newlines (",(0,i.jsx)(n.code,{children:"\\n"}),")."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Single string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'joinStringsWithNewline({"a", "b", "c"}); // "a\\nb\\nc"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-genstringconst-string-character-int-length",children:(0,i.jsx)(n.code,{children:"string genString(const string& character, int length);"})}),"\n",(0,i.jsxs)(n.p,{children:["Repeats ",(0,i.jsx)(n.code,{children:"character"})," for ",(0,i.jsx)(n.code,{children:"length"})," times."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Generated string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'genString("*", 5); // "*****"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"void-removeindexesvectorstring-vec-vectorint-indexes",children:(0,i.jsx)(n.code,{children:"void removeIndexes(vector<string>& vec, vector<int> indexes);"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes elements in ",(0,i.jsx)(n.code,{children:"vec"})," at each index in ",(0,i.jsx)(n.code,{children:"indexes"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Params:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"vec"}),": target vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indexes"}),": indices to remove (should be sorted descending to avoid shifting)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'vector<string> v = {"a", "b", "c"};\nremoveIndexes(v, {1}); // v == {"a", "c"}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"case-transformation-functions",children:(0,i.jsx)(n.strong,{children:"Case Transformation Functions"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"}),(0,i.jsx)(n.br,{}),"\n","String case utilities for converting between common naming styles and detecting string case."]}),"\n",(0,i.jsx)(n.h2,{id:"types-1",children:(0,i.jsx)(n.strong,{children:"Types"})}),"\n",(0,i.jsx)(n.h3,{id:"enum-class-stringcase",children:(0,i.jsx)(n.code,{children:"enum class StringCase"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Values:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Unknown"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"CamelCase"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"PascalCase"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"SnakeCase"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"KebabCase"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"functions-overview-1",children:(0,i.jsx)(n.strong,{children:"Functions Overview"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Function"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"detectCaseStyle"})}),(0,i.jsx)(n.td,{children:"Detect the case style of a string."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toLowerCase"})}),(0,i.jsx)(n.td,{children:"Convert all characters to lowercase."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toUpperCase"})}),(0,i.jsx)(n.td,{children:"Convert all characters to uppercase."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toCamelCase"})}),(0,i.jsx)(n.td,{children:"Convert a string to camelCase."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toPascalCase"})}),(0,i.jsx)(n.td,{children:"Convert a string to PascalCase."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toSnakeCase"})}),(0,i.jsx)(n.td,{children:"Convert a string to snake_case."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toKebabCase"})}),(0,i.jsx)(n.td,{children:"Convert a string to kebab-case."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"stringcase-detectcasestyleconst-string-str",children:(0,i.jsx)(n.code,{children:"StringCase detectCaseStyle(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Detects the case style of the given string (camel, pascal, snake, kebab, or unknown)."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"StringCase"})," enum value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'detectCaseStyle("my_variable"); // StringCase::SnakeCase\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-tolowercaseconst-string-str",children:(0,i.jsx)(n.code,{children:"string toLowerCase(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Converts all characters to lowercase."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Lowercase string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'toLowerCase("HeLLo"); // "hello"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-touppercaseconst-string-str",children:(0,i.jsx)(n.code,{children:"string toUpperCase(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Converts all characters to uppercase."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," Uppercase string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'toUpperCase("HeLLo"); // "HELLO"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-tocamelcaseconst-string-str",children:(0,i.jsx)(n.code,{children:"string toCamelCase(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Converts string to camelCase."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," camelCase string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'toCamelCase("hello_world"); // "helloWorld"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-topascalcaseconst-string-str",children:(0,i.jsx)(n.code,{children:"string toPascalCase(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Converts string to PascalCase."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," PascalCase string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'toPascalCase("hello_world"); // "HelloWorld"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-tosnakecaseconst-string-str",children:(0,i.jsx)(n.code,{children:"string toSnakeCase(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Converts string to snake_case."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," snake_case string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'toSnakeCase("HelloWorld"); // "hello_world"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string-tokebabcaseconst-string-str",children:(0,i.jsx)(n.code,{children:"string toKebabCase(const string& str);"})}),"\n",(0,i.jsx)(n.p,{children:"Converts string to kebab-case."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," kebab-case string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'toKebabCase("HelloWorld"); // "hello-world"\n'})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);